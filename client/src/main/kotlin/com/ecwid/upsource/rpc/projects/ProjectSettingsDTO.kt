// Generated by the codegen. Please DO NOT EDIT!
// source: message.ftl

package com.ecwid.upsource.rpc.projects

/**
 * @param projectName Project name
 * @param vcsSettings VCS configuration represented as a JSON-encoded string
 * @param checkIntervalSeconds How often to check for new commits (in seconds)
 * @param projectModel See ProjectModel parameters
 * @param codeReviewIdPattern Code review ID pattern
 * @param runInspections Whether to run code inspections
 * @param inspectionProfileName Name of the inspection profile in IntelliJ IDEA
 * @param mavenSettings The contents of maven-settings.xml
 * @param mavenProfiles Maven profiles. Space- or comma-separated list
 * @param mavenJdkName Maven project JDK
 * @param modelConversionSystemProperties Model conversion system properties
 * @param gradleProperties Gradle properties
 * @param gradleInitScript Gradle init script
 * @param externalLinks See ExternalLinkDTO parameters
 * @param issueTrackerProviderSettings See IssueTrackerProviderSettingsDTO parameters
 * @param userManagementUrl Hub user management page URL
 * @param defaultEncoding Default encoding (e.g. UTF-8)
 * @param defaultBranch Default branch
 * @param ignoredFilesInReview A newline-separated list of wildcards. Files matching the patterns specified here will be excluded from reviews
 * @param skipFileContentsImport A newline-separated list of wildcards. Files matching the patterns specified here — binaries, for example — won't be imported.
 * @param javascriptLanguageLevel JavaScript language level (one of the following: JS_1_5, ES5, JS_1_8_5, ES6, JSX, NASHORN, FLOW)
 * @param phpLanguageLevel PHP language level (one of the following: null, 5.3.0, 5.4.0, 5.5.0, 5.6.0, 7, 7.1)
 * @param phpExternalDependencies List of paths to external dependencies for a PHP project
 * @param phpComposerScript List of commands that will be run to set up PHP composer. Default command is "php composer.phar install"
 * @param pythonLanguageLevel Python language level (one of the following: null, 2, 3)
 * @param buildStatusReceiveToken "login:password" credentials used to receive build status from the build server
 * @param authorCanCloseReview In addition to CLOSE_REVIEW permission, controls whether review authors can close reviews
 * @param authorCanDeleteReview In addition to DELETE_REVIEW permission, controls whether review authors can delete reviews
 * @param limitResolveDiscussion In addition to EDIT_REVIEW permission, controls whether only the person that started a discussion can resolve it
 * @param reviewDeadlineHours Default review deadline, in hours
 * @param addMergeCommitsToBranchReview Sets whether merge commits should be added to branch reviews
 * @param isArchived Whether the project is archived
 */
@Suppress("unused")
data class ProjectSettingsDTO(
	/**
	 * Project name (required)
	 */
	val projectName: String,

	/**
	 * VCS configuration represented as a JSON-encoded string (optional)
	 */
	val vcsSettings: String? = null,

	/**
	 * How often to check for new commits (in seconds) (optional)
	 */
	val checkIntervalSeconds: Long? = null,

	/**
	 * See ProjectModel parameters (required)
	 * 
	 * @see com.ecwid.upsource.rpc.projects.ProjectModel
	 */
	val projectModel: ProjectModel,

	/**
	 * Code review ID pattern (required)
	 */
	val codeReviewIdPattern: String,

	/**
	 * Whether to run code inspections (optional)
	 */
	val runInspections: Boolean? = null,

	/**
	 * Name of the inspection profile in IntelliJ IDEA (optional)
	 */
	val inspectionProfileName: String? = null,

	/**
	 * The contents of maven-settings.xml (optional)
	 */
	val mavenSettings: String? = null,

	/**
	 * Maven profiles. Space- or comma-separated list (optional)
	 */
	val mavenProfiles: String? = null,

	/**
	 * Maven project JDK (optional)
	 */
	val mavenJdkName: String? = null,

	/**
	 * Model conversion system properties (optional)
	 */
	val modelConversionSystemProperties: String? = null,

	/**
	 * Gradle properties (optional)
	 */
	val gradleProperties: String? = null,

	/**
	 * Gradle init script (optional)
	 */
	val gradleInitScript: String? = null,

	/**
	 * See ExternalLinkDTO parameters (repeated)
	 * 
	 * @see com.ecwid.upsource.rpc.projects.ExternalLinkDTO
	 */
	val externalLinks: List<ExternalLinkDTO> = emptyList(),

	/**
	 * See IssueTrackerProviderSettingsDTO parameters (optional)
	 * 
	 * @see com.ecwid.upsource.rpc.issuetrackers.IssueTrackerProviderSettingsDTO
	 */
	val issueTrackerProviderSettings: com.ecwid.upsource.rpc.issuetrackers.IssueTrackerProviderSettingsDTO? = null,

	/**
	 * Hub user management page URL (optional)
	 */
	val userManagementUrl: String? = null,

	/**
	 * Default encoding (e.g. UTF-8) (optional)
	 */
	val defaultEncoding: String? = null,

	/**
	 * Default branch (optional)
	 */
	val defaultBranch: String? = null,

	/**
	 * A newline-separated list of wildcards. Files matching the patterns specified here will be excluded from reviews (repeated)
	 */
	val ignoredFilesInReview: List<String> = emptyList(),

	/**
	 * A newline-separated list of wildcards. Files matching the patterns specified here — binaries, for example — won't be imported. (repeated)
	 */
	val skipFileContentsImport: List<String> = emptyList(),

	/**
	 * JavaScript language level (one of the following: JS_1_5, ES5, JS_1_8_5, ES6, JSX, NASHORN, FLOW) (optional)
	 */
	val javascriptLanguageLevel: String? = null,

	/**
	 * PHP language level (one of the following: null, 5.3.0, 5.4.0, 5.5.0, 5.6.0, 7, 7.1) (optional)
	 */
	val phpLanguageLevel: String? = null,

	/**
	 * List of paths to external dependencies for a PHP project (repeated)
	 */
	val phpExternalDependencies: List<String> = emptyList(),

	/**
	 * List of commands that will be run to set up PHP composer. Default command is "php composer.phar install" (repeated)
	 */
	val phpComposerScript: List<String> = emptyList(),

	/**
	 * Python language level (one of the following: null, 2, 3) (optional)
	 */
	val pythonLanguageLevel: String? = null,

	/**
	 * "login:password" credentials used to receive build status from the build server (optional)
	 */
	val buildStatusReceiveToken: String? = null,

	/**
	 * In addition to CLOSE_REVIEW permission, controls whether review authors can close reviews (optional)
	 */
	val authorCanCloseReview: Boolean? = null,

	/**
	 * In addition to DELETE_REVIEW permission, controls whether review authors can delete reviews (optional)
	 */
	val authorCanDeleteReview: Boolean? = null,

	/**
	 * In addition to EDIT_REVIEW permission, controls whether only the person that started a discussion can resolve it (optional)
	 */
	val limitResolveDiscussion: Boolean? = null,

	/**
	 * Default review deadline, in hours (optional)
	 */
	val reviewDeadlineHours: Int? = null,

	/**
	 * Sets whether merge commits should be added to branch reviews (optional)
	 */
	val addMergeCommitsToBranchReview: Boolean? = null,

	/**
	 * Whether the project is archived (optional)
	 */
	val isArchived: Boolean? = null
) {
	@Suppress("unused")
	internal constructor() : this(
		projectName = "",
		vcsSettings = null,
		checkIntervalSeconds = null,
		projectModel = ProjectModel(),
		codeReviewIdPattern = "",
		runInspections = null,
		inspectionProfileName = null,
		mavenSettings = null,
		mavenProfiles = null,
		mavenJdkName = null,
		modelConversionSystemProperties = null,
		gradleProperties = null,
		gradleInitScript = null,
		externalLinks = emptyList(),
		issueTrackerProviderSettings = null,
		userManagementUrl = null,
		defaultEncoding = null,
		defaultBranch = null,
		ignoredFilesInReview = emptyList(),
		skipFileContentsImport = emptyList(),
		javascriptLanguageLevel = null,
		phpLanguageLevel = null,
		phpExternalDependencies = emptyList(),
		phpComposerScript = emptyList(),
		pythonLanguageLevel = null,
		buildStatusReceiveToken = null,
		authorCanCloseReview = null,
		authorCanDeleteReview = null,
		limitResolveDiscussion = null,
		reviewDeadlineHours = null,
		addMergeCommitsToBranchReview = null,
		isArchived = null
	)
}

