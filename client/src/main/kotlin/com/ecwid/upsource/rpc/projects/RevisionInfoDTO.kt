// Generated by the codegen. Please DO NOT EDIT!
// source: message.ftl

package com.ecwid.upsource.rpc.projects

/**
 * @param projectId Project ID in Upsource
 * @param revisionId Upsource revision ID (may differ from VCS revision ID in case of a multi-root project)
 * @param revisionDate Revision date (author date in case of Git which differentiates author and committer dates)
 * @param effectiveRevisionDate Revision date that agrees with graph topology (this means that child revisions will always have a larger effective date). In case of Git, can be equal to either author or committer date.
 * @param revisionCommitMessage Commit message of the revision
 * @param state Revision state: none(1), found(2), imported(3)
 * @param vcsRevisionId The VCS revision ID
 * @param shortRevisionId Short revision ID
 * @param authorId User ID of the commit's author
 * @param reachability See RevisionReachabilityEnum parameters
 * @param tags Revision tags, if any
 * @param branchHeadLabel Branch head labels, if any
 * @param parentRevisionIds List of parent revisions IDs
 */
data class RevisionInfoDTO(
	/**
	 * Project ID in Upsource (required)
	 */
	val projectId: String,

	/**
	 * Upsource revision ID (may differ from VCS revision ID in case of a multi-root project) (required)
	 */
	val revisionId: String,

	/**
	 * Revision date (author date in case of Git which differentiates author and committer dates) (required)
	 */
	val revisionDate: Long,

	/**
	 * Revision date that agrees with graph topology (this means that child revisions will always have a larger effective date). In case of Git, can be equal to either author or committer date. (required)
	 */
	val effectiveRevisionDate: Long,

	/**
	 * Commit message of the revision (required)
	 */
	val revisionCommitMessage: String,

	/**
	 * Revision state: none(1), found(2), imported(3) (required)
	 */
	val state: RevisionStateEnum,

	/**
	 * The VCS revision ID (required)
	 */
	val vcsRevisionId: String,

	/**
	 * Short revision ID (required)
	 */
	val shortRevisionId: String,

	/**
	 * User ID of the commit's author (required)
	 */
	val authorId: String,

	/**
	 * See RevisionReachabilityEnum parameters (required)
	 * 
	 * @see com.ecwid.upsource.rpc.projects.RevisionReachabilityEnum
	 */
	val reachability: RevisionReachabilityEnum,

	/**
	 * Revision tags, if any (repeated)
	 */
	val tags: List<String> = emptyList(),

	/**
	 * Branch head labels, if any (repeated)
	 */
	val branchHeadLabel: List<String> = emptyList(),

	/**
	 * List of parent revisions IDs (repeated)
	 */
	val parentRevisionIds: List<String> = emptyList()
) {
	@Suppress("unused")
	internal constructor() : this(
		projectId = "",
		revisionId = "",
		revisionDate = 0L,
		effectiveRevisionDate = 0L,
		revisionCommitMessage = "",
		state = RevisionStateEnum.NONE,
		vcsRevisionId = "",
		shortRevisionId = "",
		authorId = "",
		reachability = RevisionReachabilityEnum.REACHABLE,
		tags = emptyList(),
		branchHeadLabel = emptyList(),
		parentRevisionIds = emptyList()
	)
}
