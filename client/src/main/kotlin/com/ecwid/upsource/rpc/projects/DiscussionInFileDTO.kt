// Generated by the codegen. Please DO NOT EDIT!
// source: message.ftl

package com.ecwid.upsource.rpc.projects

/**
 * @param discussionId ID of the discussion
 * @param anchor Current discussion anchor
 * @param origin Original discussion anchor
 * @param comments See CommentDTO parameters
 * @param read See ReadEnum parameters
 * @param isStarred Whether the discussion is starred
 * @param review See ShortReviewInfoDTO parameters
 * @param labels Discussion labels. See LabelDTO parameters
 * @param issue An ID of the issue linked to the discussion
 * @param isResolved Whether the discussion is resolved
 * @param syncResult GitHub sync result. See SyncResultEnum parameters
 */
@Suppress("unused")
data class DiscussionInFileDTO(
	/**
	 * ID of the discussion (required)
	 */
	val discussionId: String,

	/**
	 * Current discussion anchor (required)
	 */
	val anchor: AnchorDTO,

	/**
	 * Original discussion anchor (optional)
	 */
	val origin: AnchorDTO? = null,

	/**
	 * See CommentDTO parameters (repeated)
	 *
	 * @see com.ecwid.upsource.rpc.projects.CommentDTO
	 */
	val comments: List<CommentDTO> = emptyList(),

	/**
	 * See ReadEnum parameters (optional)
	 *
	 * @see com.ecwid.upsource.rpc.projects.ReadEnum
	 */
	val read: ReadEnum? = null,

	/**
	 * Whether the discussion is starred (optional)
	 */
	val isStarred: Boolean? = null,

	/**
	 * See ShortReviewInfoDTO parameters (optional)
	 *
	 * @see com.ecwid.upsource.rpc.projects.ShortReviewInfoDTO
	 */
	val review: ShortReviewInfoDTO? = null,

	/**
	 * Discussion labels. See LabelDTO parameters (repeated)
	 *
	 * @see com.ecwid.upsource.rpc.projects.LabelDTO
	 */
	val labels: List<LabelDTO> = emptyList(),

	/**
	 * An ID of the issue linked to the discussion (optional)
	 */
	val issue: String? = null,

	/**
	 * Whether the discussion is resolved (optional)
	 */
	val isResolved: Boolean? = null,

	/**
	 * GitHub sync result. See SyncResultEnum parameters (optional)
	 *
	 * @see com.ecwid.upsource.rpc.projects.SyncResultEnum
	 */
	val syncResult: SyncResultEnum? = null
) {
	@Suppress("unused")
	internal constructor() : this(
		discussionId = "",
		anchor = AnchorDTO(),
		origin = null,
		comments = emptyList(),
		read = null,
		isStarred = null,
		review = null,
		labels = emptyList(),
		issue = null,
		isResolved = null,
		syncResult = null
	)
}

